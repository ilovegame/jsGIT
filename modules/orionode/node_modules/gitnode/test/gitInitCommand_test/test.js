var assert = require('assert');
var child_process = require('child_process');
var ph = require('path');
var fs = require('fs');
var testUtils = require('../testUtils');
var gitInitCommand = require('gitInitCommand');


function tearDown(dir, dirName, callback) {
    testUtils.sequential_commands(dir, [
        { cmd: 'rm', args: ['-rf', dirName] }
    ], callback);
}

function verify(dir, repoCreated, repo2, done)
{
    var path1 = ph.join(repoCreated, '.git');
    var path2 = repo2;

    var diff = child_process.spawn('diff', ['-r', path1, path2], { cwd : dir });

    var stdout = '';
    var stderr = '';
    diff.stdout.on('data', function (data) {
        //console.log('stdout: ' + data);
        stdout += data;
    });

    diff.stderr.on('data', function (data) {
        stderr += stderr;
        //console.log('stderr: ' + data);
    });

    diff.on('exit', function (code) {
        //console.log('child process exited with code ' + code);
        var output = stdout + stderr;
        if (output !== '')
        {
            done(output);
        }
        else
        {
            done();
        }
    });
}

function setUp(dir, repoName, callback) {
    var path = ph.join(dir,repoName);
    testUtils.debug('Using directory: ' + path);
    fs.exists(path, function(exists) {
        if (exists) {
            testUtils.debug('\nDirectory exists; cleaning...');
            tearDown(dir, repoName, function() {
                fs.mkdir(path, callback);
            });
        } else {
            fs.mkdir(path, callback);
        }
    });
}

exports.test = function () {
    var repoName = 'new_repo';
    var emptyRepoName = 'empty_repo';
    var dir = __dirname;
    
    describe('#1 - creating empty repo', function(){
        it(' ', function(done) {
            setUp(dir, repoName, function () {
                var path = ph.join(dir, repoName);
                gitInitCommand.init(path, function(err) {
                    assert.ifError(err);
                    verify(dir, repoName, emptyRepoName, done);
                });
            });
        });
    });
};