var treee = require('tree');
var utils = require('utils');
assert = require('assert');

function parseFile(sha1, repoPath, description) {
  describe(description, function(){
	it('correct file', function(done) {
		treee.readFileToTree(sha1, repoPath, function(err, tree) {
				if (err)
				{
					done(err);
				}
				else if (utils.getSha1(tree.toFile()) != sha1)
				{
					done("Incorrect sha1");
				}
				else
				{
					done();
				}
			}
		);
	});

  });
}

function testTreeParsing() {
    // node treeTest.js
    describe('parsing correctness', function(){
        var test = [];

        test.push(new Buffer("tree 62*100644 lol*01234567890123456789100644 aoi*01234567890123456789"));
        test.push(new Buffer("tree 31*100644 lol*01234567890123456789"));
        test.push(new Buffer("tree 30*100644 ab*01234567890123456789"));
        test.push(new Buffer("tree 29*40000 ab*01234567890123456789"));
        test.push(new Buffer("tree 29*40000 ab*01234567890123456789"));
        test.push(new Buffer("tree 30*100000 ab*01234567890123456789"));
        test.push(new Buffer("tree 30*120000 ab*01234567890123456789"));
        test.push(new Buffer("tree 30*160000 ab*01234567890123456789"));
        test.push(new Buffer("tree 62*100644 lol*01234567890123456789100644 aoi*01234567899876543210"));
        //console.log(test.length);
        for(var i = 0; i < test.length; ++i) {
            //console.log(i);
            for(var j = 0; j < test[i].length; ++j) { 
                //console.log(test[i]);
                
                if(test[i][j]===42)
                    test[i][j] = 0;  //42 - ascii code for *
            }
        }


        for(var i = 0; i < test.length; ++i) {
            var tree = new treee.Tree();
            var b1 = test[i];
            treee.treeParser(test[i], function(err) {
                if(err) {
                    throw new Error('test failed ' + i.toString());        
                }
            });
        }


        var test2 = [];
        test2.push(new Buffer("tree 29*040000 ab*344567"));

        test2.push(new Buffer("tree 15*100644 lol*01234567890123456789100644 aoi*01234567890123456789"));
        test2.push(new Buffer("tree 31*140644 lol*01234567890123456789"));
        test2.push(new Buffer("tree 30*120644 ab*01234567890123456789"));
        test2.push(new Buffer("tree 30*040000 abasd*01234567890123456789"));
        test2.push(new Buffer("tree 29*40000 ab*34567890123456789"));
        test2.push(new Buffer("tree 29*040000 ab*345678901234567"));
        test2.push(new Buffer("tree 30*100000 aaaaaaaab****01234567890123456789"));
        test2.push(new Buffer("tree 30*120000 ab*012345678dae90123456789"));
        test2.push(new Buffer("tree 30*160000 ab*******01234567890123456789"));
        test2.push(new Buffer("tree*44 lol*01234567890123456789100644 aoi*01234567899876543210"));
        test2.push(new Buffer("tree "));
        test2.push(new Buffer("tree 0*"));
        test2.push(new Buffer("tree 1*1"));
        test2.push(new Buffer("wrong text"));
        test2.push(new Buffer("tre 44 lol*01234567890123456789100644 aoi*01234567899876543210"));
        test2.push(new Buffer("tree 61*100644 lol*01234567890123456789100644 aoi*1234567890123456789"));
        test2.push(new Buffer("tree 62*100644 lol*01234567890123456789100644Kaoi*1234567890123456789"));
        test2.push(new Buffer("tree 62*100644Klol*01234567890123456789100644Kaoi*1234567890123456789"));
        test2.push(new Buffer("tree 62*100644Klol*01234567890123456789100644 aoi*1234567890123456789"));
        test2.push(new Buffer("tree 62)100644 lol)01234567890123456789100644Kaoi)1234567890123456789"));
        test2.push(new Buffer("tree 62*100644 lol)01234567890123456789100644Kaoi)1234567890123456789"));
        test2.push(new Buffer("tree 62*100644 lol*01234567890123456789100644Kaoi)1234567890123456789"));
        test2.push(new Buffer("tree 62*100644 lol)01234567890123456789100644Kaoi*1234567890123456789"));
        for(var i = 0; i < test2.length; ++i)
            for(var j = 0; j < test2[j].length; ++j) 
                if(test2[i][j]===42)
                    test2[j] = 0;  //42 - ascii code for *

        for(var i = 0; i < test.length; ++i) {
            var tree = new treee.Tree();
            treee.treeParser(test2[i], function(err) {
                if(!err) {
                    throw new Error('test failed ' + i.toString());        
                }
            });
        }
    });
}



exports.test = function () {
	var sha1 = '0f198d7f17c161f091477a3154ce51aa7740cb4b';
	var repoPath = __dirname + '/git1/';
    testTreeParsing();
	parseFile(sha1, repoPath, '#1 - parsing tree');
};
