 //here be dragons
 
 
 var http = require('http')
 var out = function(res) {
     res.on('data', function(chunk){
         console.log(chunk.toString());
     }); 
     console.log('got response: ' + res.statusCode)
 };
//http.get('http://github.com/kyloel/clone.git/info/refs?service=git-upload-pack', out);
//http.get('http://github.com/kyloel/clone.git/objects/0f3ff81824d26898f6ff2eb2cecb09ca268d7a77', out);
//http.get('http://github.com/kyloel/clone.git/objects/0f/3ff81824d26898f6ff2eb2cecb09ca268d7a77', out);



//var buf1 = new Buffer("0039git-upload-pack /schacon/gitbook.git\0host=example.com\0"); //039
//console.log(buf1.toString());
//console.log(buf1.length);
//console.log(buf1.toString('utf8', 0, 3*16+9));
//var buf11 = new Buffer(buf1.toString('utf8', 0, 3*16+9));
//console.log(buf11.length);
////console.log(convertDigestToHex(buf.length.toString()));
//var buf2 = new Buffer("0032git-upload-pack /project.git\0host=myserver.com\0");//032 == 50
//console.log(buf2.toString());
//console.log(buf2.length);
//
//var buf3 = new Buffer("003fgit-upload-pack schacon/simplegit-progit.git\0host=myserver.com\0");//3f
//console.log(buf3.length);



//commands' format:
//|4 bits with length in hex|command string
//length = length(command string)
var gitUploadPackBuff = function(repo, host)
{
    // repo = /kyloel/clone.git <= few cases, check for '/' etc
    // host = github.com
    var reqbuf = new Buffer('git-upload-pack ' + repo + '\0host=' + host + '\0');
    //hexString = (reqbuf.length).toString(16); //magic  - ignore last \0, count lenbuf too.
    var hexString = (reqbuf.length + 4).toString(16);  //dunno witch one is good
    //hexString = (reqbuf.length + 3).toString(16); 
    //yourNumber = parseInt(hexString, 16);
    var len = '';
    for(var i = 0; i <  4 - hexString.length; i++)
    {
        len += '0';
    }
    len += hexString;
    var lenbuf = new Buffer(len);
    return new Buffer.concat([lenbuf, reqbuf]);
}

var addPktLen = function(commandBuffer)
{
    var hexString = (commandBuffer.length + 4).toString(16); //? 4 or 3?
    var len = '';
    for(var i = 0; i <  4 - hexString.length; i++)
    {
        len += '0';
    }
    len += hexString;
    var lenbuf = new Buffer(len);
    return new Buffer.concat([lenbuf, commandBuffer]);
}

var firstWant = function(objectId, serverCapabilities)
{
    var tempString = 'want ' + objectId + ' ';
    if(serverCapabilities.indexOf('multi_ack') != -1) //maybe turn this off? 
    {
        tempString += 'multi_ack ';
    }
    if(serverCapabilities.indexOf('ofs-delta') != -1) //packV2
    {
        tempString += 'ofs-delta ';
    }
    if(serverCapabilities.indexOf('include-tag') != -1) //copy with tags??
    {
        tempString += 'include-tag ';
    }
    var temp = new Buffer(tempString);
    temp[tempString.length-1] = 10;
    return temp;
}

var additionalWant = function(objectId)
{
    var tempString = 'want ' + objectId + "\n";
    return new Buffer(tempString);
}
var cloneWant = function(serverDisc, start, num)
{
    start = start || 0;
    num = num || (start + 32);
    var query = [];
    if((start == 0) && (serverDisc.objects[0].path == 'HEAD'))
    {
        query.push(addPktLen(
              firstWant(serverDisc.objects[0].sha1, serverDisc.capabilities)));
        for(var i = 1; (i < serverDisc.objects.length) && (i < num); i++)
        {
            query.push(addPktLen(additionalWant(serverDisc.objects[i].sha1)));
        }
    }
    else
    {
        for(var i = start; (i < serverDisc.objects.length) && (i < num); i++)
        {
            query.push(addPktLen(additionalWant(serverDisc.objects[i].sha1)));
        }
    }
    //can't use foreach, different case for index 0
    
    return Buffer.concat(query);
}

var addFlush = function(buffer)
{
    //pases array with two elements
    return Buffer.concat([buffer, new Buffer('0000')]);
}

var done = function()
{
    return addPktLen(new Buffer('done\n'));
}

//console.log(gitUploadPackBuff('/kyloel/clone.git', 'github.com'));
//console.log(gitUploadPackBuff('/kyloel/clone.git', 'github.com').toString());
console.log(gitUploadPackBuff('/schacon/gitbook.git', 'example.com').toString()); //0039
 


var object = function(sha1, path)
{
    this.sha1 = sha1;
    this.path = path;
}


//objects are in order given by server
var serverDiscovery = function(objs, capabs)
{
    this.objects = objs;
    this.capabilities  = capabs;
}

//draft implementation
//wtf is peeled ref
//warning: there could be more packets than one 
var parseReferenceDiscovery = function(data)
{
    var objects = [];
    var options;
    for(var i = 0; (i < data.length); )
    {
        var len = data.slice(i, i+4);
        var parseLen = parseInt(len.toString(), 16);
        if(parseLen == 0) 
            break;
        var toParse = data.slice(i + 4, i + parseLen).toString().replace("\n",""); //ignore ptk-len
        if(i == 0) 
        {
            var firstRow = toParse.split("\0");
            options = firstRow[1].split(" ");
            toParse = firstRow[0];
            //parse options
        }
        var obj = toParse.split(" ");
        objects.push(new object(obj[0], obj[1]));
        //console.log(parseLen);
        //console.log(toParse.toString());
        i += parseLen;
    }
    return new serverDiscovery(objects, options);
}

net = require('net');

var client = net.createConnection({port: 9418, host: 'github.com'}, function(){
    client.write(gitUploadPackBuff('/kyloel/clone.git', 'github.com'));
   
});
var first = 0;
client.on('data', function(data) {
    console.log(data);
    console.log(data.toString());
    if(first == 0)
    {
    var discovery = parseReferenceDiscovery(data)
        first = 1;
        console.log(discovery);
        console.log(cloneWant(discovery).toString());
    //    client.on('data', function(newData){
    //        console.log("answer:")
    //        console.log(newData);
    //        console.log(newData.toString());
    //    
    //    });
        client.write(addFlush(cloneWant(discovery)));
        client.write(done());
    }
    //client.end();
});
client.on('end', function() {
    console.log('client disconnected');
});

