 var http = require('http')
 var out = function(res) {
     res.on('data', function(chunk){
         console.log(chunk.toString());
     }); 
     console.log('got response: ' + res.statusCode)
 };
//http.get('http://github.com/kyloel/clone.git/info/refs?service=git-upload-pack', out);
//http.get('http://github.com/kyloel/clone.git/objects/0f3ff81824d26898f6ff2eb2cecb09ca268d7a77', out);
//http.get('http://github.com/kyloel/clone.git/objects/0f/3ff81824d26898f6ff2eb2cecb09ca268d7a77', out);



var convertDigestToHex = function(buffer) {
    var dict = {10: 'a', 11 : 'b', 12 : 'c' , 13 : 'd', 14 : 'e', 15 : 'f'};
    var res = '';
    for(var i = 0; i <= 9; ++i) dict[i] = i.toString();
    for(var i = 0 ; i < buffer.length; ++i) {
        res = res + (dict[Math.floor(buffer/16)]);
        res = res + (dict[buffer % 16]);
        //console.log(res);
    }
    return res;
}

//var buf1 = new Buffer("0039git-upload-pack /schacon/gitbook.git\0host=example.com\0"); //039
//console.log(buf1.toString());
//console.log(buf1.length);
//console.log(buf1.toString('utf8', 0, 3*16+9));
//var buf11 = new Buffer(buf1.toString('utf8', 0, 3*16+9));
//console.log(buf11.length);
////console.log(convertDigestToHex(buf.length.toString()));
//var buf2 = new Buffer("0032git-upload-pack /project.git\0host=myserver.com\0");//032 == 50
//console.log(buf2.toString());
//console.log(buf2.length);
//
//var buf3 = new Buffer("003fgit-upload-pack schacon/simplegit-progit.git\0host=myserver.com\0");//3f
//console.log(buf3.length);



//commands' format:
//|4 bits with length in hex|command string
//length = length(command string)
var gitUploadPackBuff = function(repo, host)
{
    // repo = /kyloel/clone.git <= few cases, check for '/' etc
    // host = github.com
    var reqbuf = new Buffer('git-upload-pack ' + repo + '\0host=' + host + '\0');
    hexString = (reqbuf.length).toString(16); //magic  - ignore last \0, count lenbuf too.
    //yourNumber = parseInt(hexString, 16);
    var len = '';
    for(var i = 0; i <  4 - hexString.length; i++)
    {
        len += '0';
    }
    len += hexString;
    var lenbuf = new Buffer(len);
    return new Buffer.concat([lenbuf, reqbuf]);
}

//console.log(gitUploadPackBuff('/kyloel/clone.git', 'github.com'));
//console.log(gitUploadPackBuff('/kyloel/clone.git', 'github.com').toString());
console.log(gitUploadPackBuff('/schacon/gitbook.git', 'example.com').toString()); //0039
 
var options = {
  hostname: 'github.com',
  port: 9418
  //path: '/kyloel/clone.git/git-upload-pack',
  //method: 'POST'
};

var str  = "67:69:74:2d:75:70:6c:6f:61:64:2d:70:61:63:6b:20:2f:6b:79:6c:6f:65:6c:2f:63:6c:6f:6e:65:2e:67:69:74:00:68:6f:73:74:3d:67:69:74:68:75:62:2e:63:6f:6d:00";
var bytes = str.split(":");
var bufs = []
//console.log(bytes);
for(var i = 0; i < bytes.length; i++)
{
    bufs[i] = new Buffer(1);
    bufs[i][0] = parseInt(bytes[i], 16);
}
var buffer = Buffer.concat(bufs);

console.log(buffer.toString());
//console.log('/kyloel/clone.git/git-upload-pack');
//var req = http.request(options, function(res) {
//  console.log('STATUS: ' + res.statusCode);
//  console.log('HEADERS: ' + JSON.stringify(res.headers));
//  res.setEncoding('utf8');
//  res.on('data', function (chunk) {
//    console.log('BODY: ' + chunk);
//  });
//});
//req.write(gitUploadPackBuff('/kyloel/clone.git', 'github.com'));
//req.write('0036'+buffer.toString());
//req.end();

var object = function(sha1, path)
{
    this.sha1 = sha1;
    this.path = path;
}

var serverListing = function(objs, opts)
{
    this.objects = objs;
    this.options = opts;
}

//draft implementation
var parseUploadPackAnswer = function(data)
{
    var objects = [];
    var options;
    for(var i = 0; (i < data.length); )
    {
        var len = data.slice(i, i+4);
        var parseLen = parseInt(len.toString(), 16);
        if(parseLen == 0) 
            break;
        var toParse = data.slice(i + 4, i + parseLen).toString().replace("\n",""); //i + parseLen + 4 overlaps on next row len
        if(i == 0) 
        {
            var firstRow = toParse.split("\0");
            options = firstRow[1].split(" ");
            toParse = firstRow[0];
            //parse options
        }
        var obj = toParse.split(" ");
        objects.push(new object(obj[0], obj[1]));
        //console.log(parseLen);
        //console.log(toParse.toString());
        i += parseLen;
    }
    return new serverListing(objects, options);
}

net = require('net');

var client = net.createConnection({port: 9418, host: 'github.com'}, function(){
    client.write(gitUploadPackBuff('/kyloel/clone.git', 'github.com'));
   
});
client.on('data', function(data) {
    //console.log(data);
    //console.log(data.toString());
    console.log(parseUploadPackAnswer(data));
    //client.write('0032want 6329ed30b8121ec91b06b7a55c2a090482e2847\n');
    client.end();
});
client.on('end', function() {
    console.log('client disconnected');
});

