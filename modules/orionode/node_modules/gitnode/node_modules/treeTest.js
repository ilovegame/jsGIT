// node treeTest.js

tree = require('./tree');
assert = require('assert');

var test = [];

test.push(new Buffer("tree 62*100644 lol*01234567890123456789100644 aoi*01234567890123456789"));
test.push(new Buffer("tree 31*100644 lol*01234567890123456789"));
test.push(new Buffer("tree 30*100644 ab*01234567890123456789"));
test.push(new Buffer("tree 29*40000 ab*01234567890123456789"));
test.push(new Buffer("tree 29*40000 ab*01234567890123456789"));
test.push(new Buffer("tree 30*100000 ab*01234567890123456789"));
test.push(new Buffer("tree 30*120000 ab*01234567890123456789"));
test.push(new Buffer("tree 30*160000 ab*01234567890123456789"));
test.push(new Buffer("tree 62*100644 lol*01234567890123456789100644 aoi*01234567899876543210"));
//console.log(test.length);
for(var i = 0; i < test.length; ++i) {
    //console.log(i);
    for(var j = 0; j < test[i].length; ++j) { 
        //console.log(test[i]);
        
        if(test[i][j]===42)
            test[i][j] = 0;  //42 - ascii code for *
    }
}


for(var i = 0; i < test.length; ++i) {
    var b1 = test[i];
    var b2 = tree.getBuffer(tree.getDictionary(test[i]));
    if(b1.length !== b2.length) throw new Error('test failed ' + i.toString());
    for(var j = 0; j < b1.length; ++j)
        if(b1[j] !== b2[j]) throw new Error('test failed ' + i.toString());
    
}

console.log('test1 completed');


var test2 = [];

test2.push(new Buffer("tree 15*100644 lol*01234567890123456789100644 aoi*01234567890123456789"));
test2.push(new Buffer("tree 31*140644 lol*01234567890123456789"));
test2.push(new Buffer("tree 30*120644 ab*01234567890123456789"));
test2.push(new Buffer("tree 30*040000 abasd*01234567890123456789"));
test2.push(new Buffer("tree 29*40000 ab*34567890123456789"));
test2.push(new Buffer("tree 30*100000 aaaaaaaab****01234567890123456789"));
test2.push(new Buffer("tree 30*120000 ab*012345678dae90123456789"));
test2.push(new Buffer("tree 30*160000 ab*******01234567890123456789"));
test2.push(new Buffer("tree*44 lol*01234567890123456789100644 aoi*01234567899876543210"));
test2.push(new Buffer("tree "));
test2.push(new Buffer("tree 0*"));
test2.push(new Buffer("tree 1*1"));
test2.push(new Buffer("wrong text"));
test2.push(new Buffer("tre 44 lol*01234567890123456789100644 aoi*01234567899876543210"));
test2.push(new Buffer("tree 61*100644 lol*01234567890123456789100644 aoi*1234567890123456789"));
test2.push(new Buffer("tree 62*100644 lol*01234567890123456789100644Kaoi*1234567890123456789"));
test2.push(new Buffer("tree 62*100644Klol*01234567890123456789100644Kaoi*1234567890123456789"));
test2.push(new Buffer("tree 62*100644Klol*01234567890123456789100644 aoi*1234567890123456789"));
test2.push(new Buffer("tree 62)100644 lol)01234567890123456789100644Kaoi)1234567890123456789"));
test2.push(new Buffer("tree 62*100644 lol)01234567890123456789100644Kaoi)1234567890123456789"));
test2.push(new Buffer("tree 62*100644 lol*01234567890123456789100644Kaoi)1234567890123456789"));
test2.push(new Buffer("tree 62*100644 lol)01234567890123456789100644Kaoi*1234567890123456789"));
for(var i = 0; i < test2.length; ++i)
    for(var j = 0; j < test2[j].length; ++j) 
        if(test2[i][j]===42)
            test2[j] = 0;  //42 - ascii code for *

for(var i = 0; i < test2.length; ++i)
    assert.throws(function() {
            tree.getDictionary(test2[i])
        },
        Error, 'OK'
    );
        
console.log('tests2 completed');