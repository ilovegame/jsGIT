var fs = require('fs');
var ph = require('path');


/* Conflict parser is used for merge and cherry-pick;
 * 
 * The file created is .git/MERGE_MSG
 * 
 * and is of the following format:
 * 
 * COMMIT DESCRIPTION
 * 
 * Conflicts:
 * conflict1
 * conflict2
 * ...
 * conflictn
 * 
 */

function conflictParser(repopath) {
    this.repopath = repopath;
    this.conflicts = [];
    this.description = '';
}

conflictParser.prototype.save = function(callback) {
    if (!this.description) {
        callback(err);
        return;
    }
    var mergeMsgContent = this.description +'\n\n';
    mergeMsgContent += 'Conflicts:\n';
    for (var i = 0; i < this.conflicts.length; ++i) {
        mergeMsgContent += this.conflicts[i] + '\n';   
    }
    fs.writeFile(ph.join(this.repopath, 'MERGE_MSG'), mergeMsgContent, callback);
};

function load(repopath, callback) {
    var CONFLICTS_STRING = 'Conflicts:\n';
    fs.readFile(ph.join(repopath, 'MERGE_MSG'), function(err, buffer) {
        if (err) {
            callback(err);
            return;
        }
        var dataToParse = buffer.toString('utf-8', 0, buffer.length);
        var i = dataToParse.length - 2;
        while (i >= 0) {
            if (dataToParse[i] === dataToParse[i+1] && dataToParse[i] === '\n') break;
            i--;
        }
        if(i < 1) throw err;
        var cParser = new conflictParser(repopath);
        cParser.description = dataToParse.slice(0, i);
        i += 2;
        var x = 0;
        while (x < CONFLICTS_STRING.length) {
            if(dataToParse[i+x] !== CONFLICTS_STRING[x]) throw err;
            x++;
        }
        i += CONFLICTS_STRING.length;
        var tmpStr = '';
        while (i < dataToParse.length) {
            if(dataToParse[i] === '\n') {
                if (tmpStr.length === 0) throw err;
                cParser.addConflict(tmpStr);
                tmpStr = '';
            }
            tmpStr += dataToParse[i];   
            i++;
        }
        callback(undefined, cParser);
    });
    
}

conflictParser.prototype.setDescription = function (headsha1, commitsha1) {
    this.description = 'Merge branch ' + 
                            commitsha1 + ' into ' + headsha1 + '.';   
    
}

conflictParser.prototype.setDescription2 = function (str) {
    this.description = str;
}

conflictParser.prototype.addConflict = function(path) {
    this.conflicts.push(path);
}

conflictParser.prototype.setConflicts = function(conflicts) {
    this.conflicts = conflicts.slice();  
}

conflictParser.prototype.removeConflict = function(path) {
    var index = this.conflicts.indexOf(path);
    if (index !== -1) { 
        this.conflicts.splice(index, 1);
        return true;
    } else return false;
}

exports.load = load;
exports.conflictParser = conflictParser;