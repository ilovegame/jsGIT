//api somewhat similiar to node.js's fs
var fs = require('fs');
var co = require('crypto')
var zlib = require('zlib')

var fileToBlob = function(path, callback)
{
    fs.readFile(path, function (err, data) {
        if(err) throw err;
        var shasum = co.createHash('sha1');
        //assum that length of buffer is length of data
        var header = 'blob '+data.length;
        console.log(data.length);
        var head = new Buffer(header);
        var store = header + data;
        var str = Buffer.concat([head, data]);
         console.log(Buffer.isBuffer(str));
        shasum.update(str);
        var sha = shasum.digest('hex');
        zlib.deflate(str, function(err, blob) {
            if(err) throw err;
            callback(err, sha, blob);
        });
    });
}

exports.fileToBlob = fileToBlob;


/////**
// * callback(blob_content, sha1)
// */
//var fileToBlob_async = function(path, callback)
//{
//    absolute = ph.resolve(path); 
//    
//}
//
///**
// * Container for file with blob object factory
// * @param 
// */
//var fileContainer = function(path)
//{
//    this.path = ph.resolve(path); 
//    fs.readFile(this.path, function (err, data) {
//        if (err) throw err;
//        //jak wczytaæ plik
//        var shasum = co.createHash('sha1');
//        header = "blob #"+data.length
//        shasum.update(data);
//        var d = shasum.digest('hex');
//    });
//}
//
//
///* Lazy definition function pattern
// * http://michaux.ca/articles/lazy-function-definition-pattern
// var foo = function() {
//    var t = new Date();
//    foo = function() {
//        return t;
//    };
//    return foo();
//};
// */
//fileContainer.prototype =
//{
//    content: function(callback)
//    {
//        fs.readFile(this.path, function (err, data) {
//            if (err) throw err;
//            callback(data);
//        });
//    },
//    content_lazy : function()
//    {
//        fs.readFile(this.path, function (err, data) {
//            if (err) throw err;
//            this.content_lazy = function()
//            {
//                
//            }
//            callback(data);
//        });
//    },
//    
//    SHA1: function(callback)
//    {
//        var shasum = co.createHash('sha1');
//    }
//    
//    
//}

