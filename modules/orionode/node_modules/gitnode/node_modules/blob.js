//copy to get exact length of data?
//var data = new Buffer(data);
//NOW fileDataTo... NEED TO GET AN UNMODIFIED BUFFER WITH FILE CONTENTS

//api somewhat similiar to node.js's fs
var fs = require('fs');
var utils = require('utils');

/**
 * Create blob buffer from buffer containing file
 * @param data Unmodyfied buffer with file data
 * @param callback function(err, blob)
 */
var fileToBlob = function(data, callback)
{
    var header = 'blob '+data.length+'\0';
    var head = new Buffer(header);
    var store = Buffer.concat([head, data]);
    callback(undefined, store);
}

/**
 * Reads file and saves it in repo as blob using optional options.
 * @param filePath path to file
 * @param repoPath path to .git folder f.e. /my_project/.git/
 * @param options optional zlib compression options
 * @param callback optional callback(err) fired after end of operation
 */
var saveFileAsBlob = function(filePath, repoPath, options, callback)
{
    options = options || {};
    fs.readFile(filePath, function (err, data) {
        if(err) callback(err);
        fileToBlob(data, function(err, blob){
            utils.saveObject(blob, repoPath, options, callback); 
        });
    });
}

/**
 * Produce buffer with file contents from given uncompressed blob buffer
 * @param data
 * @param callback function(err, fileBuffer) buffer with file 
 */
var blobToFile = function(data, callback)
{
    var i = 0;
    while(data[i] != 0)
    {
        i++;
    }
    var fileBuffer = data.slice(i+1);
    callback(undefined, fileBuffer)
}

/**
 * Reads blob and saves it at given path
 * @param sha1 name for blob
 * @param repoPath path to .git folder f.e. /my_project/.git/
 * @param filePath path to file
 * @param callback optional callback(err) fired after end of operation
 */
var saveBlobAsFile = function(sha1, repoPath, filePath, callback)
{
    callback = callback || function(){};
    utils.readAndParse(sha1, repoPath, blobToFile, function(err, file){
        if(err) callback(err);
        fs.writeFile(filePath, file, callback);
    });
}

exports.blobToFile = blobToFile;
exports.fileToBlob = fileToBlob;
exports.saveFileAsBlob = saveFileAsBlob;
exports.saveBlobAsFile = saveBlobAsFile;
