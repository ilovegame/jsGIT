var fs = require('fs');
var ph = require('path');
//PACK_IDX_SIGNATURE 0xff744f63	/* "\377tOc" */
//TODO verify correctness
function PackIndex(fanout, objectsCount, objects, crc32, offsetValues, offsetEntries)
{
	this.fanout = fanout;
	this.objectsCount = objectsCount;
	this.objects = objects;
	this.crc32 = crc32;
	this.offsetValues = offsetValues;
	this.offsetEntries = offsetEntries;
}

//callback - function(err, packIndex object)
function readPackIndex(sha1, repoPath, callback)
{
	var dir = ph.join(repoPath, 'objects/pack');
	var file = 'pack-' + sha1 + '.idx';
	var path = ph.join(dir, file);
	
	fs.readFile(path, function (err, content) {
		if (err)
		{
			callback(err);
		}
		else {
			//console.log(err);
			//console.log(content);
			var index = 0;
			//console.log(content.length);
			var dummy = content.readInt32BE(index);
			index += 4;
			var gitVersion = content.readInt32BE(index);
			index += 4;
			//console.log(dummy);
			//console.log(gitVersion);

			var fanout = new Array(256);//TODO
			for (var i = 0; i < fanout.length; ++i)
			{
				fanout[i] = content.readInt32BE(index);
				index += 4;
			}

		//   | fanout[255] = total objects 
			var objectsCount = fanout[fanout.length - 1];
			//console.log(fanout);

			var objects = new Array(objectsCount);
			var temp = "";
			for (var i = 0; i < objectsCount; ++i)
			{
				//TODO ?
				objects[i] = content.toString('hex', index, index+20);
				index += 20;
				temp += objects[i];
				//console.log(objects[i]);
			}
			
			var crc32 = new Array(objectsCount);
			for (var i = 0; i < objectsCount; ++i)
			{
				crc32[i] = content.toString('hex', index, index+4);
				index += 4;
				//console.log(crc32[i]);
			}

			//TODO 31 bit? msbit set?
			var offsetValues = new Array(objectsCount);
			for (var i = 0; i < objectsCount; ++i)
			{
				offsetValues[i] = content.readInt32BE(index);
				index += 4;
				//console.log("offset[" + i + "]" + offsetValues[i]);
			}
			
		//7a16e4488ae40c7d2bc56ea2bd43e25212a66c45
		//powinno byc: 
		//0037eadbf35b668d378eb40a621e9c3214af5594

			//console.log(content.length - index);
			var sha1 = content.toString('hex', content.length-40, content.length-20);
			
			//console.log(sha1);
			var checksum = content.toString('hex', content.length-20, content.length);
			//console.log(checksum);
			
			var offsetEntriesTableSize = (content.length - index - 40);
			//console.log(offsetEntriesTableSize);
			
			//TODO
			var offsetEntries = new Array(offsetEntriesTableSize);
			for (var i = 0; i < offsetEntries.length; ++i)
			{
				offsetEntries[i] = content.toString('hex', index, index+8);
				index += 8;
				//console.log(offsetEntries[i]);
			}
			
			//console.log("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
			//(fanout, objectsCount, objects, cr32, offsetValues, offsetEntries)
			var packIdx = new PackIndex(fanout, objectsCount, objects, crc32, offsetValues, offsetEntries);
			callback(null, packIdx);
		}
	});
	
	
	
}

exports.readPackIndex = readPackIndex; 