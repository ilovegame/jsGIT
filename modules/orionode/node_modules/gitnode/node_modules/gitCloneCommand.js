var rs = require('refs');
var ph = require('path');
var fs = require('fs');
var utils = require('utils');
var up = require('unpack');
var co = require('gitCheckout');
var gup = require('gitUploadPack');
var gi = require('gitInitCommand');


/**
 * Example of use:
 *  cloneGit('test', 'git://github.com/kyloel/clone.git', test);
 *  cloneGit('test', 'git://github.com/kyloel/oriongit.git', test);
 *  cloneGit('test', 'git://github.com/torvalds/linux.git', test);
 *  cloneGit('test', 'git://github.com/kyloel/clone2.git', test);
 *  var test = function(err){
 *      if(err)
 *          console.log(err);
 *      else
 *          console.log('Done');
 *  }
 */

/**
 * Saves rebuilt objects in repo
 * @param objects objects from rebuildObjects
 * @param repoPath string with path to repo
 */
var saveInRepo = function(objects, repoPath, callback)
{
    var len = Object.keys(objects).length;
    saveObject(objects, Object.keys(objects), repoPath, 0, len, callback);
}

/**
 * Iterator for saveInRepo
 */
var saveObject = function(objects, keys, repoPath, num, limit, callback)
{
    if(num < limit)
    {
        utils.saveObject(objects[keys[num]], repoPath, {},  function(err){
            if(err)
                callback(err);
            saveObject(objects, keys, repoPath, num + 1, limit, callback);
        }); 
    }
    else
    {
        callback(undefined);
    }
}

/**
 * Adds cloned branches to repository
 * @param refs Refs object of inited repo
 * @param discovery Server discovery
 * @param num how many branches has been added
 * @param limit number of branches
 * @param repoPath path to repo
 * @param callback callback called when adding is finished
 */
var addBranches = function(refs, discovery, num, limit, repoPath, callback)
{
    if(num < limit)
    {
        refs.createBranch(discovery.heads[num].path.replace('refs/heads/','') , discovery.heads[num].sha1, function(err){
            if(err) 
            {
                callback(err);
                return;
            }
            if((discovery.hasValidHead()) && discovery.heads[num].sha1 === discovery.headSha1())
            {
                fs.writeFile(ph.join(repoPath, 'HEAD'), new Buffer('ref: ' + discovery.heads[num].path), 
                    function(err){
                        if(err)
                        {
                            callback(err);
                            return;
                        }
                        addBranches(refs, discovery, num+1, limit, repoPath, callback);
                    });
            }
            else
                addBranches(refs, discovery, num+1, limit, repoPath, callback);
        });
    }
    else
    {
        callback(undefined);
    }
}

/**
 *Clone remote repo to given directory, todo:iterate packs, error handling, callback
 *@param repoPath path where to clone repo
 *@param remoteRepoGit link to remote repository in git:// protocol
 *@param callback(err) 
 */
var cloneGit = function(repoPath, remoteRepoGit, callback)
{
    gup.getPack(remoteRepoGit, function(pack, discovery)
    {
        up.scanPack(pack, function(err, data){
            var objects = up.rebuildObjects(pack, data);
            gi.init(repoPath, function(err){
                if(err)
                    callback(err);
                
                //temporary fix TODO:
                //repoPath = ph.join(repoPath, '/.git');
                repoPath = repoPath + '/.git';
                var refs = new rs.Refs(repoPath, function(err){
                        if(err)
                            callback(err);
                        addBranches(refs, discovery, 0, discovery.headCount(), repoPath,
                            function(err){
                                if(err)
                                    callback(err);
                                saveInRepo(objects, repoPath, function(err){
                                    if(err)
                                        callback(err);
                                    if(discovery.hasValidHead())
                                        co.gitCheckout(discovery.headSha1(), repoPath, function(err){
                                            if(err)
                                                callback(err);
                                            callback(undefined);
                                        });
                                    else if(discovery.headCount())
                                        co.gitCheckout(discovery.heads[0].sha1, repoPath, function(err){
                                            if(err)
                                                callback(err);
                                            callback(undefined);
                                        });
                                    });
                            });
                });
            });
        });
    });
}

exports.cloneOverGit = cloneGit;

   