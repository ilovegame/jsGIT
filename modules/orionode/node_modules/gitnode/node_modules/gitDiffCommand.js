var commit = require('commit');
var tree = require('tree.js');
var gs = require('gitutils');
var diff = require('diff');
var indexFile = require('indexFile');
var fs = require('fs');
var ph = require('path');
var dirwalk = require('dirwalk');
var utils = require('utils');
//TODO gitutils: +var fs = require('fs');
// TODO dependencies diff

// Reads blob file and removes its' header
// @param repoPath - path of .dir
// @param sha1 - blob file sha1
// @param callback - function (err, data)
function readBlobFile(repoPath, sha1, callback)
{
	var path = utils.getFilePath(sha1, repoPath);
	utils.readObject(sha1, repoPath, function(err, buffer) {
		if (err)
		{
			callback(err, null);
		}
		else
		{
			var str = buffer.toString('utf8');
			var data = str.split('\0');
			callback(null, data[1]);
		}
	});
}


// Checks if git object with given sha1 exists
// @param repoPath - path of .dir
// @param sha1 - object file sha1
// @param callback - function (exists)
function objectExists(repoPath, sha1, callback)
{
	var path = utils.getFilePath(sha1, repoPath);
	fs.exists(path, callback);
}


// Checks if blob exists, reads it and returns file content
// if it does not exist - return empty string
// @param repoPath - path of .dir
// @param sha1 - blob file sha1
// @param callback - function (err, data)
function getBlob(repoPath, sha1, callback)
{
	if (!sha1 || sha1 === '')
	{
		callback(null, '');
	}
	else
	{
		objectExists(repoPath, sha1, function (exists) {
			if (!exists)
			{
				callback(null, '');
			}
			else
			{
				readBlobFile(repoPath, sha1, function(err, blobContent) {
					if (err)
					{
						callback(err, null);
					}
					else
					{
						callback (null, blobContent);
					}
				});
			}
		});
	}
}

// Reads two blobs. If any doesn't exist, returns empty string as it's content.
// @param repoPath - path of .dir
// @param sha1_1 - first blob file sha1
// @param sha1_2 - second blob file sha1
// @param callback - function (err, blob1, blob2)
function getTwoBlobs(repoPath, sha1_1, sha1_2, callback)
{
	getBlob(repoPath, sha1_1, function(err, blob1) {
		if (err)
		{
			callback(err, null, null);
		}
		else
		{
			getBlob(repoPath, sha1_2, function(err, blob2) {
				if (err)
				{
					callback(err, null, null);
				}
				else
				{
					callback(null, blob1, blob2);
				}
			});
		}
	});
}

// Reads one blob and one file from fs. If any doesn't exist, returns empty string as it's content.
// @param repoPath - path of .dir
// @param filePath - path of file to read
// @param sha1 - blob sha1
// @param callback - function (err, fileContent, blobContent)
function getFileAndBlob(repoPath, filePath, sha1, callback)
{
	getBlob(repoPath, sha1, function(err, blob) {
		if (err)
		{
			callback(err, null, null);
		}
		else
		{
			fs.exists(filePath, function (exists) {
				if (!exists)
				{
					callback(null, '', blob);
				}
				else
				{
					
					fs.readFile(filePath, function(err, buffer) {
						if (err)
						{
							callback(err, null, null);
						}
						else
						{
							var fileContent = buffer.toString('utf8');
							callback(null, fileContent, blob);
						}
					});
				}
			});
		}
	});
}




// Reads two blobs and returns their diff
// @param repoPath - path of .git directory
// @param oldSha1 - file's previous version
// @param newSha1 - file's new version
// @param relativeFilePath - relative path of file, which old and new versions we compare
// @param callback - function (err, filePath, files)
function diffBlobBlob(repoPath, oldSha1, newSha1, relativeFilePath, callback)
{
	getTwoBlobs(repoPath, oldSha1, newSha1, function(err, blob1, blob2){
		if (err)
		{
			callback(err, null, null);
		}
		else
		{
			var old = blob1;
			var new1 = blob2;
			if (!old && !new1)
			{
				callback(null, relativeFilePath, null);
			}
			else
			{
				var d = diff.diffLines(old, new1);
				callback(null, relativeFilePath, d);
			}
		}
	});
}

// Reads blob and file from fs and generates their diff
// @param repoPath - path of .git directory
// @param sha1 - blob sha1
// @param relativeFilePath - relative path of file, which old and new versions we compare
// @param callback - function (err, filePath, diff)
function diffBlobFile(repoPath, sha1, relativeFilePath, callback)
{
	var mainDirPath = ph.dirname(repoPath);
	var filePath = ph.join(mainDirPath, relativeFilePath);
	getFileAndBlob(repoPath, filePath, sha1, function(err, file, blob){
		if (err)
		{
			callback(err, null, null);
		}
		else
		{
			var d = diff.diffLines(blob, file);
			callback(null, relativeFilePath, d);
		}
	});
}



// Reads index file, gets it's objects, converts bin sha1 to hex
// @param repoPath - path of .git folder
// @param callback - function (err, objects). objects is dictionary
function getIndexObjects(repoPath, callback)
{
	//getIndexObjects
	new indexFile.Index(repoPath, function(err, index) {
		if (err)
		{
			callback(err, null);
		}
		else
		{
			var keys = Object.keys(index.objects); 
			for (i = 0; i < keys.length; ++i)
			{
				var obj = index.objects[keys[i]];
				var sha1 = obj['SHA_1'];
				var b = new Buffer(sha1, 'binary');
				sha21 = b.toString('hex');
				obj['sha1'] = sha21;
				
			}
			callback(null, index.objects);
		}
	});
}

// Generates diffs for given blobs and files
// it destroys blobs and relativeFilesPaths !!!
// @param repoPath - path of .git folder
// @param blobs - blobs to compare with files, it is dictionary with 
// 	relative paths as keys
// @param relativeFilesPaths - dictionary with files
// @param callback - function(err, diffs), where diff is dictionary
function getDiffBlobsFiles(repoPath, blobs, relativeFilesPaths, callback)
{
	var i;
	var objectsToDiff = 0;
	var diffsDone = 0;
	var quit = false;
	var diffDict = { };

	function tempCallback (err, objectPath, diffRes){
		if (err)
		{
			quit = true;
			callback(err, null);
		}
		else if (!quit)
		{
			diffDict[objectPath] = diffRes;
			diffsDone++;
			if (objectsToDiff === diffsDone)
			{
				callback(null, diffDict);
			}
		}
	}
	var keys = Object.keys(blobs);
	for (i = 0; i < keys.length; ++i)
	{
		var obj = blobs[keys[i]];
		var sha1 = obj['SHA_1'];
		objectsToDiff++;
		var objectPath = obj['path'];
		delete blobs[keys[i]];
		delete relativeFilesPaths[objectPath];
		
		diffBlobFile(repoPath, sha1, objectPath, tempCallback);
	}
	// rest:
	// console.log(blobs);
	// console.log(relativeFilesPaths);
	
	keys = Object.keys(relativeFilesPaths)
	for (i = 0; i < keys.length; ++i)
	{
		var objectPath = keys[i];
		diffBlobFile(repoPath, '', objectPath, tempCallback);
		objectsToDiff++;
		delete relativeFilesPaths[keys[i]];
	}
}

// " Getting a diff between working tree and index "
// @param repoPath - path of .git dir
// @param callback - function (err, diffs), diffs: dictionary { file_name : diff }
// @param relativeFilePath - optional. If set, generates diff for single file
function getDiffWorkingTreeAndIndex (repoPath, callback, relativeFilePath)
{
	getIndexObjects(repoPath, function (err, indexObjects) {
		if (err)
		{
			callback(err, null);
		}
		else
		{
			var path = ph.dirname(repoPath);
			dirwalk.walk(path, function(err, workingDirFiles) {
				if (err)
				{
					callback(err, null);
				}
				else
				{
					if (relativeFilePath)
					{
						indexObjects = leaveOneEntry(relativeFilePath, indexObjects);
						workingDirFiles = leaveOneEntry(relativeFilePath, workingDirFiles);
					}
					getDiffBlobsFiles(repoPath, indexObjects, workingDirFiles, callback);
				}
			});
		}
	});
}

// Gets list of blob objects sha1 that are stored in commit
// @param repoPath - path of .git directory
// @param sha1 - commit sha1
// @param callback - function (err, blobsDict)
function getCommitBlobs(repoPath, sha1, callback)
{
	commit.readFileToCommit(sha1, repoPath, function(err, commitObj) {
		if (err)
		{
            //console.log(sha1);
			callback(err, null);
		}
		else
		{
			tree.readFileToTree(commitObj.objectId, repoPath, function(err, treeObj) {
				if (err)
				{
					callback(err, null);
				}
				else
				{
					var repodir = ph.dirname(repoPath) + '/'; //TODO 
					treeObj.walk(repodir, function (err, treeInfo, graph) {
						if (err)
						{
							callback(err, null);
						}
						else
						{
							callback(null, treeInfo);
						}
					});
				}
				
			});
		}
	});
}


//  "Getting a diff between index and HEAD"
// @param repoPath - path of .git dir
// @param callback - function (err, diffs), diffs: dictionary { file_name : diff }
// @param relativeFilePath - optional. If set, generates diff for single file
function getDiffHeadIndex (repoPath, callback, relativeFilePath)
{
	getIndexObjects(repoPath, function (err, newBlobs) {
		if (err) 
		{
			callback(err, null);
		}
		else
		{
			var gitpath = ph.dirname(repoPath) + '/'; 
				// TODO getHeadSha1 arguments can be modified in future

			function getDiffs(oldBlobs)
			{
				
				if (relativeFilePath)
				{
					oldBlobs = leaveOneEntry(relativeFilePath, oldBlobs);
					newBlobs = leaveOneEntry(relativeFilePath, newBlobs);
				}
					
				getDiffBlobsBlobs (repoPath, oldBlobs, newBlobs, function(err, diffs) {
					if (err)
					{
						callback(err, null);
					}
					else
					{
						callback(null, diffs);
					}
				});
			}
			
			gs.getHeadSha1(repoPath, function (err, headSha1) {
				if (err)
				{
					callback(err, null);
				}
				else if (!headSha1) //there is no commit
 				{
					getDiffs({ } );
				}
				else
				{
					getCommitBlobs(repoPath, headSha1, function (err, oldBlobs) {
						if (err)
						{
							callback(err, null);
						}
						else
						{
							getDiffs(oldBlobs);
						}
					});
				}
			});
		}
	});
}


function leaveOneEntry(key, dict)
{
	if (key in dict)
	{
		var temp = { };
		temp [key] = dict[key];
		return temp;
	}
	else
	{
		return {} ;
	}
}

// "Getting a diff between two commits"
// @param repoPath - path of .git dir
// @param oldCommitSha1 - first commit sha1
// @param newCommitSha1 - second commit sha1
// @param callback - function (err, diffs), diffs: dictionary { file_name : diff }
// @param relativeFilePath - optional. If set, generates diff for single file
function getDiffCommitCommit (repoPath, oldCommitSha1, newCommitSha1, callback, relativeFilePath)
{
    
	getCommitBlobs(repoPath, oldCommitSha1, function (err, oldBlobs) {
        
		if (err)
		{
            //console.log(err);
			callback(err, null);
		}
		else
		{
			getCommitBlobs(repoPath, newCommitSha1, function (err, newBlobs) {
				if (err)
				{
					callback(err, null);
				}
				else
				{
					if (relativeFilePath)
					{
						oldBlobs = leaveOneEntry(relativeFilePath, oldBlobs);
						newBlobs = leaveOneEntry(relativeFilePath, newBlobs);
					}
					
					getDiffBlobsBlobs (repoPath, oldBlobs, newBlobs, function(err, diffs) {
                        
						if (err)
						{
							callback(err, null);
                            
						}
						else
						{
                            console.log('wtf3');
							callback(null, diffs);
						}
					});
				}
			});
		}
	});
}

function getDiffCommit (repoPath, newCommitSha1, callback, relativeFilePath)
{
    getCommitBlobs(repoPath, newCommitSha1, function (err, newBlobs) {
        if (err)
        {
            callback(err, null);
        }
        else
        {
            if (relativeFilePath)
            {
                
                newBlobs = leaveOneEntry(relativeFilePath, newBlobs);
            }
            var oldBlobs = [];
            getDiffBlobsBlobs (repoPath, oldBlobs, newBlobs, function(err, diffs) {
                if (err)
                {
                    callback(err, null);
                }
                else
                {
                    callback(null, diffs);
                }
            });
        }
    });

}

// Generates diffs for given two blobs dictionaries
// it destroys blobsOld and blobsNew
// @param repoPath - path of .git folder

// @param blobsOld - blobs to compare with files, it is dictionary with 
// 	relative paths as keys
// @param blobsNew - like above
// @param callback - function(err, diffs), where diff is dictionary
function getDiffBlobsBlobs (repoPath, blobsOld, blobsNew, callback)
{
	var i;
	var objectsToDiff = 0;
	var diffsDone = 0;
	var quit = false;
	var diffDict = { };
    
	function tempCallback (err, objectPath, diffRes){
		if (err)
		{
			quit = true;
			callback(err, null); // ?
		}
		else if (!quit)
		{
			if (diffRes)
			{
				diffDict[objectPath] = diffRes;
			}
			diffsDone++;
			if (objectsToDiff === diffsDone)
			{
				callback(null, diffDict);
			}
		}
	}

	function iterateBlobs(keys)
	{
		for (i = 0; i < keys.length; ++i)
		{
			var oldSha1;	
			if (keys[i] in blobsOld)
			{
				var oldObj = blobsOld[keys[i]];
				oldSha1 = oldObj['sha1'];
				delete blobsOld[keys[i]];
			}
			else
			{
				oldSha1 = '';
			}
			var newSha1; 		
			if (keys[i] in blobsNew)
			{
				var newObj = blobsNew[keys[i]];			
				newSha1 = newObj['sha1'];
				delete blobsNew[keys[i]];
			}
			else
			{
				newSha1 = '';
			}
			
			objectsToDiff++;
			diffBlobBlob(repoPath, oldSha1, newSha1, keys[i], tempCallback);
		}
	}

	var keys = Object.keys(blobsOld);
	iterateBlobs(keys);
	
	keys = Object.keys(blobsNew);
	iterateBlobs(keys);
}


function occurences(str, character)
{
	var res = 0;
	for (var i = 0; i < str.length; ++i)
	{
		if (str[i] === character)
		{
			res++;
		}
	}
	return res;
}
function diffToString(file1, file2, diff)
{
	var str = '';
	str += 'diff --git a/' + file1 + ' b/' + file2 + '\n';
	str += 'index 380e08d..bbfd849 100644\n' ;
	str += '--- a/' + file1 + '\n';
	str += '+++ b/' + file2 + '\n';
	
	var lines1 = 1;
	var lines2 = 1;
	
	var temp = '';
	for (var i = 0; i < diff.length; ++i)
	{
		var lines = diff[i]['value'].split('\n');
		var len = occurences(diff[i]['value'], '\n');

		if (!diff[i]['added'] && !diff[i]['removed'])
		{
			lines1 += len;
			lines2 += len;
			temp += diff[i]['value'];
		}
		else if (diff[i]['added'])
		{
			lines2 += len;
			for (var j = 0; j < lines.length; ++j)
			{
				temp += '+ ';
				temp += lines[j] + '\n';
			}
		}
		else
		{
			lines1 += len;
			for (var j = 0; j < lines.length; ++j)
			{
				temp += '- ' + lines[j] + '\n';
			}
		}
	}	
	//@@ -1,3 +1,4 @@
	str += '@@ -1,' + lines1 + ' +1, ' + lines2 + '@@ \n'; 
	
	str += temp;
	return str;
}

exports.getDiffCommit = getDiffCommit;
exports.getDiffHeadIndex = getDiffHeadIndex;
exports.getDiffCommitCommit = getDiffCommitCommit;
exports.getDiffWorkingTreeAndIndex = getDiffWorkingTreeAndIndex;
exports.diffToString = diffToString;
exports.getCommitBlobs = getCommitBlobs;
exports.readBlobFile = readBlobFile;