var dirwalk = require('dirwalk');
var fs = require ('fs');
var ph = require ('path');

// Verifies if given folder (or file )is a git repo
// @param path - file/dir path
// @param callback - function(err, repoOrNull);
function verifyRepository(path, folder, callback)
{
	var gitFolderPath = ph.join(path, folder, '.git');
	fs.exists(gitFolderPath, function (exists) {
		if (exists)
		{
			fs.stat(gitFolderPath, function (err, stat) {
				if (err)
				{
					callback(err, null);
				}
				else if (stat.isDirectory())
				{
					callback(null, folder);
				}
				else
				{
					callback(null, null);
				}
			});
		}
		else
		{
			callback(null, null);
		}
	});
}

// Gets list of repos in path. It simply iterates folder in
// path and check if there is .git folder
// @param path - folder where we look for repos
function getRepositories(path, callback)
{
	var repositories = [];
	fs.readdir(path, function (err, list)
	{
		if (err)
		{
			callback(err, null);
		} 
		else {
			var foldersCount = list.length;

			if (foldersCount === 0)
			{
				callback(null, []);
			}
			else
			{
				var foldersVerified = 0;
				var quit = false;
				list.forEach(function (folder) {
					verifyRepository(path, folder, function(err, repo) {
						if (quit) return;
						foldersVerified++;
						if (err) 
						{
							quit = true;
							callback(err, null);
						}
						else
						{
							if (repo)
							{
								repositories.push(repo);
							}
							
							if (foldersVerified === foldersCount)
							{
								callback(null, repositories);
							}
						}
					});
					

				});
			}
		}		
	});
}




// Asynchro recursive removing  directory path
// @param path - dir to remove
// @param ignoreGitDir - leave folders with .git dir?
// @param callback - function (err)
function removeDir(path, ignoreGitDir, callback)
{
	fs.readdir(path, function(err, list) {
		if (err)
		{
			throw err;
		}
		
		if (list.length === 0)
		{
			fs.rmdir(path, callback);
		}
		else
		{
			var children = list.length;
			var removed = 0;
			var removeThisDir = true;
			var quit = false;
			
			list.forEach(function(file) {
				if (quit) return;
				var filePath = ph.join(path, file);
				fs.stat(filePath, function(err, stat) {
					if (err)
					{
						quit = true;
						callback(err);
					}
					else
					{			
						function tempCallback(err) {
								if (quit) return;
								
								if (err)
								{
									throw err;
									callback(err);
								}
								else
								{
									children--;
									if (children === 0 && removeThisDir)
									{
										fs.rmdir(path, callback);
									}
								}
							}
						if (ignoreGitDir && stat && stat.isDirectory() && file === '.git')
						{
							removeThisDir = false;
						}
						else if (stat && !stat.isDirectory())
						{
							fs.unlink(filePath, tempCallback);
						}
						else
						{
							removeDir(filePath, ignoreGitDir, tempCallback);
						}
					}
				});
			});
		}		 
	});
}

// Removes repository
// @param path - repo path to remove
// @param callback - function (err)
function removeRepository(path, callback)
{
	fs.exists(path, function(exists) {
		if (!exists)
		{
			callback('Repo does not exist');
		}
		else
		{
			removeDir(path, false, callback);
		}
	});
}
exports.getRepositories = getRepositories;
exports.removeRepository = removeRepository;