var fs = require('fs');
var zlib = require('zlib');
var utils = require('utils');

//TODO tests

function Tag(objectId, type, name, description, tagger)
{
	this.objectId = objectId;
	this.type = type;
	this.name = name;
	this.description = description;
	this.tagger = tagger;
}

Tag.prototype.toFile = function(path)
	{
		var newLine = '\n';
		var data = 'object ' + this.objectId + newLine;
		data += 'type ' + this.type + newLine;
		data += this.name + newLine;
		data += 'tagger ' + this.tagger.toString() + newLine;
		data += newLine;
		data += this.description + newLine;
		data = 'tag ' + data.length  + '\0'+ data;
		return data;
	};

Tag.prototype.store = function(path) {
		utils.store(this, path)
	};


Tag.prototype.sha1Store = function (repoPath) {
		utils.sha1Store(this, repoPath);
	};

//TODO checking correctness?
function objectToTag(data, callback)
{
    var dataToSplit = data.toString('utf-8', 0, data.length);
    lines = dataToSplit.split('\n');
    //parsing line 1 (tag bytes\uuuuobject sha1)
    var header = utils.splitByFirst(lines[0], '\u0000object ');
    var objectId = header[1];
    var lengthStr = header[0].split('tag ')[1];
    var length = parseInt(lengthStr);
    var contentSize = data.length - header[0].length - 1;
    if (length != contentSize)
    {
            callback(null, 'error');
    }
    //parsing line 2 (type ...)
    var type = lines[1].split('type ')[1];

    //line 3
    var name = lines[2];

    //parsing line 4
    var taggerDetails = utils.splitByFirst(lines[3], 'tagger ');
    var tagger = utils.parseOperationDetails(taggerDetails[1]);

    //line 6
    var description = lines[5];

    //parsing lines 5, 7
    if (lines[4] != '' || lines[6] != '')
    {
            callback(null, 'error');
    }

    var tag = new Tag(objectId, type, name, description, tagger);
    callback(null, tag);
}

exports.Tag = Tag;
exports.Tag.toFile = Tag.prototype.toFile;
exports.Tag.store = Tag.prototype.store;
exports.Tag.sha1Store = Tag.prototype.sha1Store;
exports.fileToTag = fileToTag;