var fs = require('fs');
var ph = require('path');

// Asynchro creating folders. Calls callback when all are created
// @param repoPath - path of .git dir
// @param folders - array with relative paths of folders
// @param callback - function (err)
function createFolders(repoPath, folders, callback)
{
    var filesCreated = 0;
    var filesToCreate = folders.length;
    var quit = false;

    folders.forEach(function(item) {
        fs.mkdir(ph.join(repoPath, item), function (err) {
            filesCreated++;
            if (!quit && err) 
            {
                quit = true;
                callback(err);
            }
            else if (!quit && filesCreated === filesToCreate)
            {
                callback(null);
            }
        }); 
    });
}

// Asynchro creating files. Calls callback when all are created
// @param repoPath - path of .git dir
// @param folders - dictionary { fileName : fileContent }
// @param callback - function (err)
function createFiles(repoPath, files, callback)
{
    var filesCreated = 0;
    var filesToCreate = Object.keys(files).length;
    var quit = false;

    for (var key in files) {
        var path = ph.join(repoPath, key);
        fs.writeFile(path, files[key], function(err) {
            filesCreated++;
            if (!quit && err) 
            {
                quit = true;
                callback(err);
            }
            else if (!quit && filesCreated === filesToCreate)
            {
                callback(null);
            }
        });
    }
    
}

//sample config
var configContent = '[core]\n' +
    '\trepositoryformatversion = 0\n' +
    '\tfilemode = true\n' +
    '\tbare = false\n' +
    '\tlogallrefupdates = true\n';

var HEADContent = 'ref: refs/heads/master\n';
var descriptionContent = 'Unnamed repository; edit this file \'description\' to name the repository.\n';


// Creates empty git repository
// @param path - directory where we create .git folder
// @param callback - function (err)
function init (path, callback)
{
    var files = { 'config' : configContent, 'description' : descriptionContent, 
        'HEAD' : HEADContent, 'info/exclude' : ''};
    
    var folders = ['branches', 'hooks', 'info', 'refs', 'objects'];
    var foldersLevel2= ['objects/info', 'objects/pack', 'refs/heads', 'refs/tags'];
    var repoPath = ph.join(path, '.git');
    fs.mkdir(repoPath, function(err) {
        if (err)
        {
            //console.log('error kurwa');
            callback(err);
        }
        else
        {
            createFolders(repoPath, folders, function (err) {
                if (err)
                {
                    callback(err);
                }
                else
                {
                    createFolders(repoPath, foldersLevel2, function (err) {
                        if (err)
                        {
                            callback(err);
                        }
                        else
                        {
                            createFiles(repoPath, files, callback);
                        }
                    });
                }
            });
        }
    });
}

exports.init = init;