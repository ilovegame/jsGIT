var co = require('crypto');
var gf = require('gitfile');

function getSha1(data)
{
	var shasum = co.createHash('sha1');
	shasum.update(data);
	return shasum.digest('hex');
}

function splitByFirst(string, separator)
{
	var i = string.indexOf(separator);
	var n = separator.length;
	return [string.slice(0,i), string.slice(i+n)];
}

function store(gitObject, path) 
{
	var data = gitObject.toFile();
	gf.deflateOptsToFile(data, path, null);
}

function sha1Store (gitObject, repoPath) 
{
	var data = gitObject.toFile();
	var sha1 = getSha1(data);
	var path = gf.getFilePath(sha1, repoPath);
	gf.checkSha1Path(sha1, repoPath, function (err, boolean) {	
		if (err) {
			throw 'error';
		}
		else
		{
			gf.deflateOptsToFile(data, path, null);
		}
	});
}



function parseOperationDetails(line)
//line format: author <mail> timeZone timestamp
{
	var words = line.split(' ');
	var timestamp = words[words.length - 1];
	var timeZone = words[words.length - 2];
	var mail = words[words.length - 3]; //<mail>
	mail = mail.substring(1, mail.length-1);//mail

	var author = '';
	for (var i = 0; i < words.length-3; ++i)
	{
		if (i > 0)
		{
			author += ' ';
		}
		author += words[i];
	}
	return new OperationDetails(author, mail, timestamp, timeZone);
}

function OperationDetails(author, authorMail, timestamp, timeZone)
{
	this.author = author;
	this.authorMail = authorMail;
	this.timestamp = timestamp;
	this.timeZone = timeZone;
}

OperationDetails.prototype.toString = function() {
	return this.author + ' <' + this.authorMail + '> ' + this.timeZone + ' ' + this.timestamp;
};

exports.OperationDetails = OperationDetails;
exports.parseOperationDetails = parseOperationDetails;

exports.getSha1 = getSha1;
exports.splitByFirst = splitByFirst;
exports.store = store;
exports.sha1Store = sha1Store;