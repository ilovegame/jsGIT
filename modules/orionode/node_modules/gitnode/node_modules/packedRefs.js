/*******************************************************************************
 * Object for managing packed refs in .git/packed-refs
 * Version: Test/Alpha
 ******************************************************************************/

var fs = require('fs');

function PackedRefs(path, callback) {
	this.path = path;
	this.branches = new Array();
	var packedRefsObject = this;
	fs.exists(this.path, function(exists) {
		if (exists) {
			packedRefsObject.parse(function() {
				callback();
			});
		} else {
			callback();
		}
	});
}

PackedRefs.prototype.parse = function(callback) {
	var packedRefsObject = this;
	fs.readFile(this.path + '/packed-refs', function (err, fileContent) {
		if (err) {
			throw err;
		}
		var index = 0;

		while (index < fileContent.length) {

			if (fileContent.toString('utf8', index, index + 1) == '#') {
				index = packedRefsObject.goToNextRow(fileContent, index);
				
				continue;
			}
			var objectSHA_1 = fileContent.toString('utf8', index, index + 40);
			index += 41;
			
			var path = '';
			while (fileContent.toString('utf8', index, index + 1) != '\n') {
				path += fileContent.toString('utf8', index, index + 1);
				++index;
			}
			++index;
			
			var objectInfo = new Array();
			objectInfo['SHA_1'] = objectSHA_1;
			objectInfo['path'] = path;
			packedRefsObject.branches.push(objectInfo);
		}

		callback();
	});
};

PackedRefs.prototype.goToNextRow = function(fileContent, index) {
	while (index < fileContent.length &&
		fileContent.toString('utf8', index, index + 1) != '\n') {
		++index;
	}
	++index;

	return index;
}

PackedRefs.prototype.getName = function(path) {
	var words = path.split('/');

	return words[words.length - 1];
}

PackedRefs.prototype.getBranchesNames = function(callback) {
	var names = new Array();
	for (var index in this.branches) {
		var name = this.getName(this.branches[index]['path']);
		names.push(name);
	}

	callback(names);
}

PackedRefs.prototype.addBranch = function(SHA_1, path, callback) {
	var newBranch = new Array();
	newBranch['SHA_1'] = SHA_1;
	newBranch['path'] = path;

	this.branches.push(newBranch);

	callback();
}

PackedRefs.prototype.saveInFile = function(callback) {
	var fileContent = '# pack-refs with: peeled ' + '\n';

	for (var index in this.branches) {
		fileContent += this.branches[index]['SHA_1'] + ' ';
		fileContent += this.branches[index]['path'] + '\n';
	}
	fs.writeFile(this.path + '/packed-refs', fileContent, function (err) {
  		if (err) {
  			throw err;
  		}
  		
  		callback();
	});
}

exports.PackedRefs = PackedRefs;
