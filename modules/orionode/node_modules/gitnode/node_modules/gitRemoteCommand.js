var rM = require('refs');
var cM = require('gitConfigCommand');

var getRemotesNames = function(repoPath, callback) {
	var refsManager = new rM.Refs(repoPath, function(err) {
		if (err) {
			callback(err, '');
			return;
		}
		refsManager.getRemotesNames(function(err, names) {
			if (err) {
				callback(err, '');
				return;
			}
			callback('', names);
			return;
		});
	});
}

var getRemoteBranches = function(repoPath, remoteName, callback) {
	var refsManager = new rM.Refs(repoPath, function(err) {
		if (err) {
			callback(err, '');
			return;
		}
		refsManager.getRemoteBranchesNames(remoteName, function(err, branchesNames) {
			if (err) {
				callback(err, '');
				return;
			}
			callback('', branchesNames);
			return;
		});
	});
}

var getRemoteBranchDetails = function(repoPath, remote, branch, callback) {
	var refsManager = new rM.Refs(repoPath, function(err) {
		if (err) {
			callback(err, '');
			return;
		}
		refsManager.getBranchDetails(remote, branch, function(err, details) {
			if (err) {
				callback(err, '');
				return;
			}
			callback('', details);
			return;
		});
	});
}

var addNewRemote = function(repoPath, remoteName, remoteURI, fetchRefSpec, pushURI, pushRefSpec, callback) {
	var makeConfigCommands = function(options, index, callback) {
		if (index == options.length) {
			callback('');
			return;
		}
		cM.addOption(repoPath, 'remote.' + remoteName + '.' + options[index]['name'], options[index]['value'], function(err) {
			if (err) {
				callback(err);
				return;
			}
			makeConfigCommands(options, index + 1, function(err) {
				if (err) {
					callback(err);
					return;
				}
				callback('');
				return;
			});
		});
	}
	var options = new Array();
	var option = new Array();
	option['name'] = 'url';
	option['value'] = remoteURI;
	options.push(option);
	if (fetchRefSpec) {
		var option = new Array();
		option['name'] = 'fetch';
		option['value'] = fetchRefSpec;
		options.push(option);
	}
	if (pushURI) {
		var option = new Array();
		option['name'] = 'pushurl';
		option['value'] = pushURI;
		options.push(option);
	}
	if (pushRefSpec) {
		var option = new Array();
		option['name'] = 'push';
		option['value'] = pushRefSpec;
		options.push(option);
	}

	var refsManager = new rM.Refs(repoPath, function(err) {
		if (err) {
			callback(err);
			return;
		}
		refsManager.addRemote(remoteName, function(err) {
			if (err) {
				callback(err);
				return;
			}
			makeConfigCommands(options, 0, function(err) {
				callback('');
			});
		});
	});
}

var removeRemote = function(repoPath, remoteName, callback) {
	var makeConfigCommands = function(options, index, callback) {
		if (index == options.length) {
			callback('');
			return;
		}
		cM.getOption(repoPath, 'remote.' + remoteName + '.' + options[index], function(err, value) {
			if (err) {
				callback(err);
				return;
			}
			if (value) {
				cM.removeOption(repoPath, 'remote.' + remoteName + '.' + options[index], function(err) {
					if (err) {
						callback(err);
						return;
					}
					makeConfigCommands(options, index + 1, function(err) {
						if (err) {
							callback(err);
							return;
						}
						callback('');
						return;
					});
				});
			} else {
				makeConfigCommands(options, index + 1, function(err) {
					if (err) {
						callback(err);
						return;
					}
					callback('');
					return;
				});
			}
		});
	}

	var options = new Array();
	options.push('url')
	options.push('fetch');
	options.push('pushurl');
	options.push('push');

	makeConfigCommands(options, 0, function(err) {
		if (err) {
			callback(err);
			return;
		}
		var refsManager = new rM.Refs(repoPath, function(err) {
			if (err) {
				callback(err);
				return;
			}
			refsManager.removeRemote(remoteName, function(err) {
				if (err) {
					callback(err);
					return;
				}
				callback('');
				return;
			});
		});
	});
}

exports.getRemoteBranchDetails = getRemoteBranchDetails;
exports.getRemoteBranches = getRemoteBranches;
exports.getRemotesNames = getRemotesNames;
exports.addNewRemote = addNewRemote;
exports.removeRemote = removeRemote;
