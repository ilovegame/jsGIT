var fs = require('fs');
var zlib = require('zlib');
var utils = require('utils');

//TODO tests

function Commit(objectId, parentId, description, author, committer)
{
	this.objectId = objectId;
	this.parentId = parentId;
	this.description = description;
	this.author = author;
	this.committer = committer;
}

Commit.prototype.toFile = function ()
{
    var newLine = '\n';
    var data = 'tree ' + this.objectId + newLine;
    if (this.parentId != null) {
            data += 'parent ' + this.parentId + newLine;
    }
    data += 'author ' + this.author.toString() + newLine;
    data += 'committer ' + this.committer.toString() + newLine;
    data += newLine;
    data += this.description + newLine;
    data = 'commit ' + data.length  + '\0'+ data;
    return data;
};

Commit.prototype.store = function(path) {
    utils.store(this, path)
};


Commit.prototype.sha1Store = function (repoPath) {
        utils.sha1Store(this, repoPath);
};

//TODO checking correctness?
function fileToCommit(path, callback)
{
	fs.readFile(path, function (err, deflatedDataBuffer) {
		if (err) callback(err, null);
		zlib.inflate(deflatedDataBuffer, function(err, inflatedDataBuffer) { 
			var data = inflatedDataBuffer.toString('utf-8', 0, inflatedDataBuffer.length);
			lines = data.split('\n');
			if (lines.length != 6 && lines.length != 7)
			{
				callback(null, 'invalid file format');
			}
			//parsing 1. line ( commit bytes\uuuutree sha1)
			var header = utils.splitByFirst(lines[0], '\u0000tree ');
			var objectId = header[1];
			var lengthStr = header[0].split('commit ')[1];
			var length = parseInt(lengthStr);
			var parentId = null;
			
			//parsing 2. line
			var hasParent = 0;
			if (lines[1].split(' ')[0] == 'parent')
			{
				parentId = lines[1].split(' ')[1];
				hasParent = 1;
			}
			
			//parsing 2. or 3. line (it depends on hasParent)
			var authorDetails = utils.splitByFirst(lines[1 + hasParent], 'author ');
			var author = utils.parseOperationDetails(authorDetails[1]);
			
			var committerDetails = utils.splitByFirst(lines[2 + hasParent], 'committer ');
			var committer = utils.parseOperationDetails(committerDetails[1]);
			
			//parsing 4. or 5. line
			if (lines[3 + hasParent] != '' || lines[5 + hasParent] != '')
			{
				callback(null, 'error');
			}
			
			var description = lines[4 + hasParent];
			var commit = new Commit(objectId, parentId, description, author, committer);
			
			callback(null, commit);
		} );
	});
}

exports.Commit = Commit;
exports.Commit.toFile = Commit.prototype.toFile;
exports.Commit.store = Commit.prototype.store;
exports.Commit.sha1Store = Commit.prototype.sha1Store;
exports.fileToCommit = fileToCommit;